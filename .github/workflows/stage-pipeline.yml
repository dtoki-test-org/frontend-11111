# .github/workflows/stage-pipeline.yml
# This is a github action pipeline for staging. 
name: Stage Deployment
on:
# you may only want to run this on certain events see: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#on
  push:
    branches: [ master ]
  pull_request:
# Jobs
jobs:
  build-stage:
    runs-on: ubuntu-latest
    env:
      CI: true
      build_env: staging
    steps:
    # Checkout the code
      - uses: actions/checkout@v2
    # Run Tests
      - name: Run Unit Tests
        uses: actions/setup-node@v1
        with: 
          node-version: 12.x
      - run: |
          yarn
          yarn test --watchAll=false
    # Build Code
      - name: Build Static Site
        uses: actions/setup-node@v1
        with: 
          node-version: 12.x  
      - run: |
          yarn
          yarn build
          ls -al
        env:
          REACT_APP_CONFIG: $ {{ env.build_env }}
    # Upload build to github artifact
      - name: Upload build artifact to Github
        uses: actions/upload-artifact@v1
        with:
          name: build-artifact
          path: build/
# TODO: Deploy for stage
  deploy-stage:
    name: Upload to Amazon S3
    runs-on: ubuntu-latest
    needs: build-stage
    env:
      region: us-west-2
      bucket: dtoki-1208-app.czerotest.com
    steps:
      - name: Download artifact from build step
        uses: actions/download-artifact@v1
        with:
          name: build-artifact
      
      # Configure Aws account for S3 Sync
      - name: Configure AWS credentials for S3 sync
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}
      
      # Deploy to s3
      - name: Copy files to the test website with the AWS CLI
        id: s3Sync
        run: |
          cd build-artifact
          aws s3 sync . s3://${{ env.bucket }}

      # Invalidate Cloudfront
      - name: Invalidate Cloudfront
        run: |
          export DIST_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases.Items[?@=='${{ env.bucket }}']].Id | [0]" | tr -d '"')
          aws cloudfront create-invalidation --distribution-id ${DIST_ID} --paths "/*"

      - name: Comment on open PR
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Deploy to production
            #### Staging S3 Sync: ⚙️\`${{ steps.s3Sync.outcome }}\`
            #### Manually trigger deployment -> link-goes-here
            `;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

